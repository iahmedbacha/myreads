{"version":3,"sources":["utils/BooksAPI.js","components/ListBooksTitle.js","components/BookshelfTitle.js","components/BookCover.js","components/BookShelfChanger.js","components/BookTop.js","components/BookTitle.js","components/BookAuthors.js","components/Book.js","components/BooksGrid.js","components/BookshelfBooks.js","components/Bookshelf.js","components/ListBooksContent.js","components/OpenSearch.js","components/ListBooks.js","components/CloseSearch.js","components/SearchBooksInputWrapper.js","components/SearchBooksBar.js","components/SearchBooksResults.js","components/SearchBooks.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","id","method","body","JSON","stringify","then","res","json","search","query","data","books","ListBooksTitle","props","title","className","BookshelfTitle","BookCover","thumbnail","style","width","height","backgroundImage","defaultProps","BookShelfChanger","handleBookShelfOnChange","event","target","value","this","onChange","defaultValue","disabled","Component","BookTop","BookTitle","BookAuthors","authors","join","Book","imageLinks","BooksGrid","map","key","BookshelfBooks","Bookshelf","ListBooksContent","filter","OpenSearch","to","type","ListBooks","CloseSearch","handleCloseSearch","onClick","SearchBooksInputWrapper","handleSearchBooksInputOnChange","searchBooksInputValue","placeholder","SearchBooksBar","SearchBooksResults","SearchBooks","BooksApp","state","searchBooks","debounce","BooksAPI","Array","isArray","setState","currentState","b","length","searchBook","includes","currentlyReading","wantToRead","read","updateBook","exact","path","handleOpenSearch","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1a0c6b11.chunk.js","sourcesContent":["const api = 'https://reactnd-books-api.udacity.com';\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet { token } = localStorage;\nif (!token) {\n  localStorage.token = Math.random()\n    .toString(36)\n    .substr(-8);\n  token = localStorage.token;\n}\n\nconst headers = {\n  Accept: 'application/json',\n  Authorization: token\n};\n\nexport const get = bookId =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book);\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books);\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json());\n\nexport const search = query =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  })\n    .then(res => res.json())\n    .then(data => data.books);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ListBooksTitle = props => {\n  const { title } = props;\n  return (\n    <div className=\"list-books-title\">\n      <h1>{title}</h1>\n    </div>\n  );\n};\n\nListBooksTitle.propTypes = {\n  title: PropTypes.string.isRequired\n};\n\nexport default ListBooksTitle;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst BookshelfTitle = props => {\n  const { title } = props;\n  return <h2 className=\"bookshelf-title\">{title}</h2>;\n};\n\nBookshelfTitle.propTypes = {\n  title: PropTypes.string.isRequired\n};\n\nexport default BookshelfTitle;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst BookCover = props => {\n  const { thumbnail } = props;\n  return (\n    <div\n      className=\"book-cover\"\n      style={{\n        width: 128,\n        height: 193,\n        backgroundImage: `url(\"${thumbnail}\")`\n      }}\n    />\n  );\n};\n\nBookCover.propTypes = {\n  thumbnail: PropTypes.string\n};\n\nBookCover.defaultProps = {\n  thumbnail: ''\n};\n\nexport default BookCover;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass BookShelfChanger extends Component {\n  static propTypes = {\n    handleBookShelfOnChange: PropTypes.func.isRequired,\n    shelf: PropTypes.string.isRequired\n  };\n\n  handleBookShelfOnChange = event => {\n    const { handleBookShelfOnChange } = this.props;\n    handleBookShelfOnChange(event.target.value);\n  };\n\n  render() {\n    const { shelf } = this.props;\n    return (\n      <div className=\"book-shelf-changer\">\n        <select onChange={this.handleBookShelfOnChange} defaultValue={shelf}>\n          <option value=\"move\" disabled>\n            Move to...\n          </option>\n          <option value=\"currentlyReading\">Currently Reading</option>\n          <option value=\"wantToRead\">Want to Read</option>\n          <option value=\"read\">Read</option>\n          <option value=\"none\">None</option>\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default BookShelfChanger;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport BookCover from './BookCover';\nimport BookShelfChanger from './BookShelfChanger';\n\nconst BookTop = props => {\n  const { thumbnail, handleBookShelfOnChange, shelf } = props;\n  return (\n    <div className=\"book-top\">\n      <BookCover thumbnail={thumbnail} />\n      <BookShelfChanger\n        handleBookShelfOnChange={handleBookShelfOnChange}\n        shelf={shelf}\n      />\n    </div>\n  );\n};\n\nBookTop.propTypes = {\n  thumbnail: PropTypes.string,\n  handleBookShelfOnChange: PropTypes.func.isRequired,\n  shelf: PropTypes.string.isRequired\n};\n\nBookTop.defaultProps = {\n  thumbnail: ''\n};\n\nexport default BookTop;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst BookTitle = props => {\n  const { title } = props;\n  return <div className=\"book-title\">{title}</div>;\n};\n\nBookTitle.propTypes = {\n  title: PropTypes.string.isRequired\n};\n\nexport default BookTitle;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst BookAuthors = props => {\n  const { authors } = props;\n  return <div className=\"book-authors\">{authors.join(', ')}</div>;\n};\n\nBookAuthors.propTypes = {\n  authors: PropTypes.arrayOf(PropTypes.string)\n};\n\nBookAuthors.defaultProps = {\n  authors: []\n};\n\nexport default BookAuthors;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport BookTop from './BookTop';\nimport BookTitle from './BookTitle';\nimport BookAuthors from './BookAuthors';\n\nclass Book extends Component {\n  static propTypes = {\n    book: PropTypes.shape({\n      imageLinks: PropTypes.shape({\n        thumbnail: PropTypes.string\n      }),\n      shelf: PropTypes.string,\n      title: PropTypes.string.isRequired,\n      authors: PropTypes.array\n    }).isRequired,\n    handleBookShelfOnChange: PropTypes.func.isRequired\n  };\n\n  handleBookShelfOnChange = shelf => {\n    const { handleBookShelfOnChange, book } = this.props;\n    handleBookShelfOnChange(book, shelf);\n  };\n\n  render() {\n    const { book } = this.props;\n    return (\n      <li>\n        <div className=\"book\">\n          <BookTop\n            thumbnail={book.imageLinks && book.imageLinks.thumbnail}\n            handleBookShelfOnChange={this.handleBookShelfOnChange}\n            shelf={book.shelf}\n          />\n          <BookTitle title={book.title} />\n          <BookAuthors authors={book.authors} />\n        </div>\n      </li>\n    );\n  }\n}\n\nexport default Book;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Book from './Book';\n\nconst BooksGrid = props => {\n  const { books } = props;\n  return (\n    <ol className=\"books-grid\">\n      {books.map(book => (\n        <Book\n          key={book.id}\n          book={book}\n          handleBookShelfOnChange={props.handleBookShelfOnChange}\n        />\n      ))}\n    </ol>\n  );\n};\n\nBooksGrid.propTypes = {\n  books: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string\n    })\n  ).isRequired,\n  handleBookShelfOnChange: PropTypes.func.isRequired\n};\n\nexport default BooksGrid;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport BooksGrid from './BooksGrid';\n\nconst BookshelfBooks = props => {\n  const { books, handleBookShelfOnChange } = props;\n  return (\n    <BooksGrid\n      books={books}\n      handleBookShelfOnChange={handleBookShelfOnChange}\n    />\n  );\n};\n\nBookshelfBooks.propTypes = {\n  books: PropTypes.arrayOf(PropTypes.object).isRequired,\n  handleBookShelfOnChange: PropTypes.func.isRequired\n};\n\nexport default BookshelfBooks;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport BookshelfTitle from './BookshelfTitle';\nimport BookshelfBooks from './BookshelfBooks';\n\nconst Bookshelf = props => {\n  const { title, books, handleBookShelfOnChange } = props;\n  return (\n    <div className=\"bookshelf\">\n      <BookshelfTitle title={title} />\n      <BookshelfBooks\n        books={books}\n        handleBookShelfOnChange={handleBookShelfOnChange}\n      />\n    </div>\n  );\n};\n\nBookshelf.propTypes = {\n  title: PropTypes.string.isRequired,\n  handleBookShelfOnChange: PropTypes.func.isRequired,\n  books: PropTypes.arrayOf(PropTypes.object).isRequired\n};\n\nexport default Bookshelf;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Bookshelf from './Bookshelf';\n\nconst ListBooksContent = props => {\n  const { handleBookShelfOnChange, books } = props;\n  return (\n    <div className=\"list-books-content\">\n      <div>\n        <Bookshelf\n          title=\"Currently Reading\"\n          handleBookShelfOnChange={handleBookShelfOnChange}\n          books={books.filter(book => book.shelf === 'currentlyReading')}\n        />\n        <Bookshelf\n          title=\"Want to Read\"\n          handleBookShelfOnChange={handleBookShelfOnChange}\n          books={books.filter(book => book.shelf === 'wantToRead')}\n        />\n        <Bookshelf\n          title=\"Read\"\n          handleBookShelfOnChange={handleBookShelfOnChange}\n          books={books.filter(book => book.shelf === 'read')}\n        />\n      </div>\n    </div>\n  );\n};\n\nListBooksContent.propTypes = {\n  books: PropTypes.arrayOf(PropTypes.object).isRequired,\n  handleBookShelfOnChange: PropTypes.func.isRequired\n};\n\nexport default ListBooksContent;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst OpenSearch = () => (\n  <div className=\"open-search\">\n    <Link to=\"/search\">\n      <button type=\"button\">Add a book</button>\n    </Link>\n  </div>\n);\n\nexport default OpenSearch;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ListBooksTitle from './ListBooksTitle';\nimport ListBooksContent from './ListBooksContent';\nimport OpenSearch from './OpenSearch';\n\nconst ListBooks = props => {\n  const { title, books, handleBookShelfOnChange } = props;\n  return (\n    <div className=\"list-books\">\n      <ListBooksTitle title={title} />\n      <ListBooksContent\n        books={books}\n        handleBookShelfOnChange={handleBookShelfOnChange}\n      />\n      <OpenSearch />\n    </div>\n  );\n};\n\nListBooks.propTypes = {\n  title: PropTypes.string.isRequired,\n  books: PropTypes.arrayOf(PropTypes.object).isRequired,\n  handleBookShelfOnChange: PropTypes.func.isRequired\n};\n\nexport default ListBooks;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nclass CloseSearch extends Component {\n  static propTypes = {\n    handleCloseSearch: PropTypes.func.isRequired\n  };\n\n  handleCloseSearch = () => {\n    const { handleCloseSearch } = this.props;\n    handleCloseSearch();\n  };\n\n  render() {\n    return (\n      <Link to=\"/\">\n        <button\n          type=\"button\"\n          className=\"close-search\"\n          onClick={this.handleCloseSearch}\n        >\n          Close\n        </button>\n      </Link>\n    );\n  }\n}\n\nexport default CloseSearch;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass SearchBooksInputWrapper extends Component {\n  static propTypes = {\n    searchBooksInputValue: PropTypes.string.isRequired,\n    handleSearchBooksInputOnChange: PropTypes.func.isRequired\n  };\n\n  handleSearchBooksInputOnChange = event => {\n    const { handleSearchBooksInputOnChange } = this.props;\n    handleSearchBooksInputOnChange(event.target.value);\n  };\n\n  render() {\n    const { searchBooksInputValue } = this.props;\n    return (\n      <div className=\"search-books-input-wrapper\">\n        {/*\n          NOTES: The search from BooksAPI is limited to a particular set of search terms.\n          You can find these search terms here:\n          https://github.com/iahmedbacha/myreads/blob/master/SEARCH_TERMS.md\n\n          However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\n          you don't find a specific author or title. Every search is limited by search terms.\n        */}\n        <input\n          type=\"text\"\n          placeholder=\"Search by title or author\"\n          value={searchBooksInputValue}\n          onChange={this.handleSearchBooksInputOnChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default SearchBooksInputWrapper;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CloseSearch from './CloseSearch';\nimport SearchBooksInputWrapper from './SearchBooksInputWrapper';\n\nconst SearchBooksBar = props => {\n  const {\n    handleCloseSearch,\n    searchBooksInputValue,\n    handleSearchBooksInputOnChange\n  } = props;\n  return (\n    <div className=\"search-books-bar\">\n      <CloseSearch handleCloseSearch={handleCloseSearch} />\n      <SearchBooksInputWrapper\n        searchBooksInputValue={searchBooksInputValue}\n        handleSearchBooksInputOnChange={handleSearchBooksInputOnChange}\n      />\n    </div>\n  );\n};\n\nSearchBooksBar.propTypes = {\n  handleCloseSearch: PropTypes.func.isRequired,\n  searchBooksInputValue: PropTypes.string.isRequired,\n  handleSearchBooksInputOnChange: PropTypes.func.isRequired\n};\n\nexport default SearchBooksBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport BooksGrid from './BooksGrid';\n\nconst SearchBooksResults = props => {\n  const { books, handleBookShelfOnChange } = props;\n  return (\n    <div className=\"search-books-results\">\n      <BooksGrid\n        books={books}\n        handleBookShelfOnChange={handleBookShelfOnChange}\n      />\n    </div>\n  );\n};\n\nSearchBooksResults.propTypes = {\n  books: PropTypes.arrayOf(PropTypes.object).isRequired,\n  handleBookShelfOnChange: PropTypes.func.isRequired\n};\n\nexport default SearchBooksResults;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SearchBooksBar from './SearchBooksBar';\nimport SearchBooksResults from './SearchBooksResults';\n\nconst SearchBooks = props => {\n  const {\n    handleCloseSearch,\n    searchBooksInputValue,\n    handleSearchBooksInputOnChange,\n    books,\n    handleBookShelfOnChange\n  } = props;\n  return (\n    <div className=\"search-books\">\n      <SearchBooksBar\n        handleCloseSearch={handleCloseSearch}\n        searchBooksInputValue={searchBooksInputValue}\n        handleSearchBooksInputOnChange={handleSearchBooksInputOnChange}\n      />\n      <SearchBooksResults\n        books={books}\n        handleBookShelfOnChange={handleBookShelfOnChange}\n      />\n    </div>\n  );\n};\n\nSearchBooks.propTypes = {\n  handleCloseSearch: PropTypes.func.isRequired,\n  books: PropTypes.arrayOf(PropTypes.object).isRequired,\n  searchBooksInputValue: PropTypes.string.isRequired,\n  handleSearchBooksInputOnChange: PropTypes.func.isRequired,\n  handleBookShelfOnChange: PropTypes.func.isRequired\n};\n\nexport default SearchBooks;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { debounce } from 'throttle-debounce';\nimport * as BooksAPI from './utils/BooksAPI';\nimport ListBooks from './components/ListBooks';\nimport SearchBooks from './components/SearchBooks';\nimport './App.css';\n\nclass BooksApp extends React.Component {\n  state = {\n    /**\n     * TODO: Instead of using this state variable to keep track of which page\n     * we're on, use the URL in the browser's address bar. This will ensure that\n     * users can use the browser's back and forward buttons to navigate between\n     * pages, as well as provide a good URL they can bookmark and share.\n     */\n    books: [],\n    searchBooksInputValue: '',\n    searchBooks: []\n  };\n\n  searchBooks = debounce(300, searchBooksInputValue => {\n    BooksAPI.search(searchBooksInputValue).then(books => {\n      if (Array.isArray(books)) {\n        this.setState(currentState => {\n          return {\n            searchBooks: books.map(book => {\n              if (currentState.books.filter(b => b.id === book.id).length > 0) {\n                return currentState.books.filter(b => b.id === book.id)[0];\n              }\n              const searchBook = book;\n              searchBook.shelf = 'none';\n              return searchBook;\n            })\n          };\n        });\n      } else {\n        this.setState({\n          searchBooks: []\n        });\n      }\n    });\n  });\n\n  componentDidMount() {\n    BooksAPI.getAll().then(books => {\n      this.setState({\n        books\n      });\n    });\n  }\n\n  handleCloseSearch = () => {\n    this.setState({\n      searchBooksInputValue: '',\n      searchBooks: []\n    });\n  };\n\n  handleBookShelfOnChange = (book, shelf) => {\n    BooksAPI.update(book, shelf).then(res => {\n      if (\n        (res[shelf] && res[shelf].includes(book.id)) ||\n        (shelf === 'none' &&\n          !res.currentlyReading.includes(book.id) &&\n          !res.wantToRead.includes(book.id) &&\n          !res.read.includes(book.id))\n      ) {\n        // update successful\n        this.setState(currentState => {\n          if (shelf === 'none') {\n            return {\n              books: currentState.books.filter(b => b.id !== book.id)\n            };\n          }\n          if (currentState.books.filter(b => b.id === book.id).length > 0) {\n            return {\n              books: currentState.books.map(b => {\n                const updateBook = b;\n                if (updateBook.id === book.id) {\n                  updateBook.shelf = shelf;\n                }\n                return updateBook;\n              })\n            };\n          }\n          const updateBook = book;\n          updateBook.shelf = shelf;\n          return {\n            books: [...currentState.books, updateBook]\n          };\n        });\n      }\n    });\n  };\n\n  handleSearchBooksInputOnChange = searchBooksInputValue => {\n    this.setState({\n      searchBooksInputValue\n    });\n    if (searchBooksInputValue !== '') {\n      this.searchBooks(searchBooksInputValue);\n    } else {\n      this.setState({\n        searchBooks: []\n      });\n    }\n  };\n\n  render() {\n    const { books, searchBooks, searchBooksInputValue } = this.state;\n    return (\n      <div className=\"app\">\n        <Route exact path=\"/\">\n          <ListBooks\n            title=\"MyReads\"\n            books={books}\n            handleOpenSearch={this.handleOpenSearch}\n            handleBookShelfOnChange={this.handleBookShelfOnChange}\n          />\n        </Route>\n        <Route path=\"/search\">\n          <SearchBooks\n            handleCloseSearch={this.handleCloseSearch}\n            books={searchBooks}\n            searchBooksInputValue={searchBooksInputValue}\n            handleSearchBooksInputOnChange={this.handleSearchBooksInputOnChange}\n            handleBookShelfOnChange={this.handleBookShelfOnChange}\n          />\n        </Route>\n      </div>\n    );\n  }\n}\n\nexport default BooksApp;\n","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}